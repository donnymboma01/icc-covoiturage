rules_version = '2'; 

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow create for new registrations
      allow create: if true;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    match /vehicles/{vehicleId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /rides/{rideId} {
      // Lecture publique : tout le monde peut lire les trajets
      allow read, list: if true;

      // Création : seuls les utilisateurs connectés ET conducteurs peuvent ajouter un trajet
      allow create: if request.auth != null && 
      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isDriver &&
      request.resource.data.availableSeats >= 0; 

      // Mise à jour réservée aux utilisateurs connectés
      allow update: if request.auth != null &&
      request.resource.data.availableSeats >= 0;  // Ajout de cette condition

      // Suppression réservée au conducteur qui a créé le trajet
      allow delete: if request.auth.uid == resource.data.driverId;
    }

    match /feedback/{feedbackId} {
      // Lecture : l'utilisateur qui a créé le feedback OU l'admin peut le lire
      allow read: if request.auth != null && 
      (request.auth.uid == resource.data.userId || 
      request.auth.uid == "UID_ADMIN");
    
      // Création : tout utilisateur connecté peut créer un feedback
      allow create: if request.auth != null && 
      request.auth.uid == request.resource.data.userId &&
      request.resource.data.createdAt is timestamp;
      
      // Mise à jour : seul l'admin peut marquer comme lu/traité
      allow update: if request.auth != null && 
      request.auth.uid == "UID_ADMIN";
    
      // Suppression : seul l'admin peut supprimer
      allow delete: if request.auth != null && 
      request.auth.uid == "UID_ADMIN";
    }

    match /driverVerifications/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Ajout des règles pour la collection passengerVerifications
    match /passengerVerifications/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    match /bookings/{bookingId} {
      // Seuls les utilisateurs connectés peuvent lire les réservations, avec des conditions
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.passengerId ||
        request.auth.uid in get(/databases/$(database)/documents/rides/$(resource.data.rideId)).data.driverId
      );
      allow list: if request.auth != null;

      // Création de réservations uniquement pour les utilisateurs connectés
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
      
      // Mise à jour limitée au passager ou au conducteur du trajet
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.passengerId || 
        request.auth.uid == get(/databases/$(database)/documents/rides/$(resource.data.rideId)).data.driverId);
      
      // Suppression réservée au passager
      allow delete: if request.auth.uid == resource.data.passengerId;
    }
    
    match /churches/{churchId} {
      // Lecture publique
      allow read: if true;
      
      // Création et mise à jour réservées aux utilisateurs connectés
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }
    
    // Règles pour la collection locationSharing
    match /locationSharing/{sharingId} {
      // Temporairement, permettre toutes les opérations pour le débogage
      allow read, write: if request.auth != null;
      
      // Règles originales (commentées pour le débogage)
      // // Lecture : seuls les utilisateurs concernés par le partage peuvent lire les données
      // allow read: if request.auth != null && (
      //   request.auth.uid == resource.data.driverId || 
      //   request.auth.uid == resource.data.passengerId
      // );
      
      // // Création : seul l'utilisateur qui partage sa position peut créer un document
      // allow create: if request.auth != null && 
      //   request.auth.uid == request.resource.data.sharingUserId &&
      //   (
      //     // Vérifier que l'utilisateur est bien le conducteur ou le passager de la réservation
      //     exists(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)) &&
      //     (
      //       request.auth.uid == request.resource.data.driverId || 
      //       request.auth.uid == request.resource.data.passengerId
      //     )
      //   );
      
      // // Mise à jour : seul l'utilisateur qui partage sa position peut la mettre à jour
      // allow update: if request.auth != null && 
      //   request.auth.uid == resource.data.sharingUserId;
      
      // // Suppression : seul l'utilisateur qui partage sa position peut arrêter le partage
      // allow delete: if request.auth != null && 
      //   request.auth.uid == resource.data.sharingUserId;
    }
  }
} 