erDiagram
    Users ||--o{ Rides : "propose/réserve"
    Users ||--o{ Vehicles : "possède"
    Rides ||--|{ Bookings : "contient"
    Church ||--o{ Rides : "rattaché"

    Users {
        string uid "ID Firebase Auth"
        string email
        string fullName
        string phoneNumber
        boolean isDriver
        timestamp createdAt
        array churchIds
        string profilePicture
    }

    Vehicles {
        string id
        string userId
        string brand
        string model
        string color
        number seats
        string licensePlate
        boolean isActive
    }

    Rides {
        string id
        string driverId
        string churchId
        string departureAddress
        string arrivalAddress
        timestamp departureTime
        number availableSeats
        boolean isRecurring
        string frequency "weekly/monthly"
        string status "active/cancelled"
        number price "optionnel"
        array waypoints "points de passage"
    }

    Bookings {
        string id
        string rideId
        string passengerId
        timestamp bookingDate
        string status "pending/confirmed/cancelled"
        number seatsBooked
        string specialNotes
    }

    Church {
        string id
        string name
        string address
        array adminUserIds
        string contactEmail
        string contactPhone
    }

    import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
    import { app } from '@/app/config/firebase-config';

    const uploadImage = async (file: File, userId: string) => {
      const storage = getStorage(app);
      const fileExtension = file.name.split('.').pop();
      const filename = `profile-pictures/${userId}-${Date.now()}.${fileExtension}`;
      const storageRef = ref(storage, filename);

      try {
        const snapshot = await uploadBytes(storageRef, file);
        const downloadURL = await getDownloadURL(snapshot.ref);
        return downloadURL;
      } catch (error) {
        console.error("Erreur d'upload:", error);
        throw error;
      }
    };

if (values.profilePicture) {
  const downloadURL = await uploadImage(values.profilePicture, userCredential.user.uid);
  profilePictureUrl = downloadURL;
}
